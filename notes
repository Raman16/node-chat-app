Path

Folder Structure
public/index.html
server/server.js


server.js

const path=require('path');
const publicPath=path.join(__dirname,'../public');

console.log(__dirname+'../public');
//__dirname->server

console.log(publicPath);

output:
sysadmin@AcubeL020:/var/www/html/node-chat-app$ node server/server.js
/var/www/html/node-chat-app/server../public
/var/www/html/node-chat-app/public




ES6 Classes;
//ES6 class
class Person {
  constructor(name,age){
     this.name=name;
     this.age=age;
  }
  getUserDescription(){
      return `${this.name} Jen is 1 year(s) old`;
  }
}

var me=new Person('Raman',27);
var description=me.getUserDescription();
console.log(description);














creating two servers?
Hayato · Lecture 107 · 8 months ago


const app = express();
const server = http.createServer(app);
var io = socketIO(server)
app.use(express.static(publicPath));
 
server.listen(port, () => {
    console.log(`server is up on port ${port}`);
});
I don't understand what it's doing. express() command call http.createServer() command internally? If so, this code creates two servers and one server wrap another server??? I don't understand what's going on.

answer:
Express will manually setup the http server if you don't. In this case we are setting up the server. Two servers are not being created.

All this is done so we can attach Socket.io directly into our web server.
. We also use express to serve up our static assets. 
. There are no ties between express and socket.io.



server.js
const path=require('path');
const publicPath=path.join(__dirname,'../public');
const port=process.env.PORT || 4006;

const express=require('express');
const http=require('http');
const socketIO=require('socket.io');


var app=express();
// var server=http.createServer((req,res)=>{

// });

    

var server=http.createServer(app);
var io=socketIO(server);
//using io now we can communicate between client and server
app.use(express.static(publicPath));


//io.on:  lets us register an event listenner

io.on('connection',(socket)=>{  //this socket argument is similar to we acces in index.html
    //connection->makes a new connection.
    console.log('New User Connected...');

})
//websocket is a persistent technology...i.e client and server both keeps communication cahnnels open
//for as long as both of them want to, if the server shut down then client doent have choice
//but client try to connect to server, thinking conneciton lost.




//Basically Behind scene express uses 'http' server i.e http.createServer() whene we call app.listen
// app.listen(port,()=>{
//     console.log(`server is up on ${port}`);
// })

server.listen(port,()=>{
    console.log(`server is up on ${port}`);
})


index.html
<html>
<head>
 <meta charset="utf-8">
</head>
<body>
 <p>Welcome to Chat App.</p>

 <script src="/socket.io/socket.io.js"></script>
<script>
    var socket =io();//initiating a create from client to the server to open a 
    //websocket and keep that connection open.


    socket.on('connect',()=>{  //event fired
        console.log('connected to server');
    });

    socket.on('disconnect',()=>{
        console.log('disconnecte server.......');
    })
</script>
</body>
</html>


http://localhost:4006/
As we refresh the page we get following 

sysadmin@AcubeL020:/var/www/html/node-chat-app$ node server/server.js
server is up on 4006
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
New User Connected...
















server.js
const path=require('path');
const publicPath=path.join(__dirname,'../public');
const port=process.env.PORT || 4010;

const express=require('express');
const http=require('http');
const socketIO=require('socket.io');


var app=express();
// var server=http.createServer((req,res)=>{

// });

    

var server=http.createServer(app);
var io=socketIO(server);
//using io now we can communicate between client and server
app.use(express.static(publicPath));


//io.on:  lets us register an event listenner

io.on('connection',(socket)=>{  //this socket argument is similar to we acces in index.html
    //connection->makes a new connection.
    console.log('New User Connected...');
    socket.on('disconnect',(socket)=>{
        console.log('User was disconnected....');
    })
});


//websocket is a persistent technology...i.e client and server both keeps communication cahnnels open
//for as long as both of them want to, if the server shut down then client doent have choice
//but client try to connect to server, thinking conneciton lost.




//Basically Behind scene express uses 'http' server i.e http.createServer() whene we call app.listen
// app.listen(port,()=>{
//     console.log(`server is up on ${port}`);
// })

server.listen(port,()=>{
    console.log(`server is up on ${port}`);
})



index.html
<html>
<head>
 <meta charset="utf-8">
</head>
<body>
 <p>Welcome to Chat App.</p>

 <script src="/socket.io/socket.io.js"></script>
<script>
    var socket =io();//initiating a create from client to the server to open a 
    //websocket and keep that connection open.


    socket.on('connect',()=>{  //event fired
        console.log('connected to server');
    });

    socket.on('disconnect',()=>{
        console.log('disconnecte server.......');
    })
</script>
</body>
</html>


//when ever user closes the tab or refresh, we get user was disconnected msg as below
sysadmin@AcubeL020:/var/www/html/node-chat-app$ node server/server.js
server is up on 4010
New User Connected...
User was disconnected....
New User Connected...
User was disconnected....
New User Connected...


note:from above thing we can understand socket.io is as a two communication of client an server.


Emitting and listening to events
Check video 108



Email App example:

server                                                                     client
emit event         newEmailEvent(sends text,from,created at)               Listen for Event
Listen for event   createEmailEvent(sends text,from,created at)            emit event


server.js
const path=require('path');
const publicPath=path.join(__dirname,'../public');
const port=process.env.PORT || 4030;

const express=require('express');
const http=require('http');
const socketIO=require('socket.io');


var app=express();
var server=http.createServer(app);
var io=socketIO(server);
//using io now we can communicate between client and server
app.use(express.static(publicPath));


//io.on:  lets us register an event listenner

io.on('connection',(socket)=>{  //this socket argument is similar to we acces in index.html
    //connection->makes a new connection.
    console.log('New User Connected...');

   socket.emit('newEmail',{  //custom event  //event emitter  //from server to client
       From:'winslet@example.com',
       Text:"Hello Winslet"
   })

   socket.on('createEmail',(newEmail)=>{ //custom event from client to server
      console.log(newEmail);
   });
    socket.on('disconnect',(socket)=>{
        console.log('User was disconnected....');
    })
});
server.listen(port,()=>{
    console.log(`server is up on ${port}`);
})



public/index.js
var socket =io();//initiating a create from client to the server to open a 
//websocket and keep that connection open.


socket.on('connect',function(){  //event fired  //if we use arrow funtion it will crash on mobile/in other device...
    console.log('connected to server');

    socket.emit('createEmail',{
        To:'raman@gmail.com',
        Text:'Learn Socket.IO'
    });

});

socket.on('newEmail',function(email){  //event lintener
   console.log(email);
})

socket.on('disconnect',function(){
    console.log('disconnecte server.......');
})


index.html
<html>
<head>
 <meta charset="utf-8">
</head>
<body>
 <p>Welcome to Chat App.</p>

 <script src="/socket.io/socket.io.js"></script>
 <script src="/js/index.js"></script>

</body>
</html>

sysadmin@AcubeL020:/var/www/html/node-chat-app$ node server/server.js
server is up on 4030
New User Connected...
{ To: 'raman@gmail.com', Text: 'Learn Socket.IO' }


http://localhost:4030/
{From: "winslet@example.com", Text: "Hello Winslet"}


sudo fuser -k  3000/tcp 


IO and Socket
Phani · Lecture 108 · a year ago
Hi Andrew,

Can you please clarify difference between io.on() and socket.on() and the way these lines mean..

var app=express();
var server=http.createServer(app);
var io=socketIO(server);



io.on('connection',(socket)=>{
console.log('New user connected');
socket.on('disconnect',()=>{
  console.log('User was DisConnected');
});
});





Andrew — Instructor  · a year ago 
Hey Phani,

io.on lets us listen for server-wide events like new socket connections. The callback function we create is where we can setup events for that newly connected socket.

socket.on lets us setup event handlers for the individual socket. This could be a custom event like "newMessage" or a built-in one like "disconnect".

- Andrew

Mark as helpful (9)
DS
Daniel  · 8 months ago 
So basically, every new event is a new socket?

Mark as helpful
Andrew — Instructor  · 8 months ago 
Nope. The events are all sent over the same socket!

Mark as helpful (1)
DS
Daniel  · 8 months ago 
Ok...so how can we have multiple sockets then? One socket for every new connection, maybe? Like for every new user?

Mark as helpful
Andrew — Instructor  · 8 months ago 
I might have misunderstood your question.

"Nope. The events are all sent over the same socket!"

I was trying to say that an individual client and server communicate across a single socket. Each user gets their own connection to the server. So if you have 13 users, you'll have 13 sockets.

Mark as helpful (4)
DS
Daniel  · 8 months ago 
Ok, I got it now, thank you, Andrew!

Mark as helpful
HH
Hester Liong Khing  · 7 months ago 
Hai Andrew,



from this line,

var server=http.createServer(app);

why we can pass variable app into createServer()? because from doc, I read that createServer accept 'function (req,res)' as parameter..

hope u can clarify on that :D :D







Mark as helpful
Andrew — Instructor  · 7 months ago 
We pass in app which is from express. This supports the same pattern (function with req and res) so we don't have to define it ourselves. 

P.S. Please open a new question for new issues. This makes the Q&A easier to use and navigate.

Mark as helpful (1)
Andrea  · 7 months ago 
@Andrew, could you please spend a couple more words here? I don't understand why I have to create my events on connect/connection, but can't listen to. I have to move outside of connect/connection callback and out there listen to other events.

Makes sense to have a single socket per connection. It also makes sense to emit my events only after a connection has been established, but I don't understand why I can't listen.

I'm sorry, I could just do that of course, but I'm trying to complete my mental model of it.

Mark as helpful
Andrew — Instructor  · 7 months ago 
Hey Andrea,

I'd love to clear that up. Are you saying the course code isn't working and you needed to restructure things to get it working? Or are you saying you just want some clarification as to why we need out custom event listeners inside the connection callback function?

Mark as helpful
Andrea  · 7 months ago 
Everything's working perfectly, thank you :)

I'm sorry if I haven't been clear enough. Kind of the second, mostly because on the server everything happens inside the io.on() callback. I establish a connection, get passed the socket object and only then I can attach my emit and on methods on it, right?

On the client, I establish a connection and now I'm ready to eventually emit something. But I don't listen... I listen outside of the callback (it wouldn't even work inside the callback), and this is the point I'm not getting. Why is that?

Mark as helpful
Andrew — Instructor  · 7 months ago 
This is because the client is just a single connection so it can access the socket directly. 

On the server we have many connections, so we add the event lister inside the connection callback so we can do something for each one of them. The only place we have access to the socket is inside that callback. Otherwise the server wouldn't know which socket it should be working with.










BroadCasting:
BroadCasting is the term for a meeting and event to everybody but one specific
user i m going to start.







example:

server.js
const path=require('path');
const publicPath=path.join(__dirname,'../public');
const port=process.env.PORT || 4010;

const express=require('express');
const http=require('http');
const socketIO=require('socket.io');
const {generateMessage}=require('./utils/messages');

var app=express();
var server=http.createServer(app);
var io=socketIO(server);
//using io now we can communicate between client and server
app.use(express.static(publicPath));


//io.on:  lets us register an event listenner

io.on('connection',(socket)=>{  //this socket argument is similar to we acces in index.html
    //connection->makes a new connection.
    console.log('New User Connected...');


    socket.emit('newMessage',generateMessage('Admin','Welcome to chat app'));//from server to client who just joined//new connection
    socket.broadcast.emit('newMessage',generateMessage('Admin','New User Joined'));/// from server to all client except who joined
    socket.on('createMessage',(message)=>{ //custom event from client to server
      console.log(message);
      io.emit('newMessage',generateMessage(message.from,message.text));//to every one


    //Below code sends to everybody except to the one who sent's(i.e except to this socket)
    // socket.broadcast.emit('newMessage',{ //custom event from client to server
    //     from: message.from,
    //     text: message.text,
    //     createdAt:new Date().getTime()
    // });



   });

  


    socket.on('disconnect',(socket)=>{
        console.log('User was disconnected....');
    })
});
server.listen(port,()=>{
    console.log(`server is up on ${port}`);
})


index.js
var socket =io();//initiating a create from client to the server to open a 
//websocket and keep that connection open.


socket.on('connect',function(){  //event fired  //if we use arrow funtion it will crash on mobile/in other device...
 
    console.log('connected to server');
    socket.emit('newUser',{
        user:'Raman',
        message:'Hello Kate'
    });


});

socket.on('newMessage',function(message){  //event lintener
   console.log(message);
})

socket.on('disconnect',function(){
    console.log('disconnecte server.......');
})


utils/messages.js
var generateMessage=(from,text)=>{
   return {
       from,
       text,
       createdAt:new Date().getTime()
   }
};

module.exports={generateMessage}


sysadmin@AcubeL020:/var/www/html/node-chat-app$ node server/server.js
server is up on 4010
New User Connected...
New User Connected...



http://localhost:4010/ tab1
{from: "Admin", text: "Welcome to chat app", createdAt: 1518936546305}  

http://localhost:4010/ tab2
{from: "Admin", text: "Welcome to chat app", createdAt: 1518936540195}
{from: "Admin", text: "New User Joined", createdAt: 1518936546305}  //when tab1 loads we will get this message.













Mustache.js

Either one would get the job done! I tend to prefer Mustache for the client and HBS for the server.

Mustache is an open source logic-less template system developed for languages such as JavaScript, 
Ruby, Python, PHP, and Java. You can grab a copy of the library by visiting the official page on GitHub.
Mustache provides templates and views as the basis for creating dynamic templates. 
Views contain the data to be included in the templates as JSON. Templates contain the presentation HTML
or data with the template tags for including view data. Earlier, we mentioned mustache as logic-less.
This means the templates will not contain any if-else conditions or for loops. Now, let’s get started 
on mustache templates using a simple example.

